// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id          String    @id @default(cuid())
    title       String
    slug        String    @unique
    content     String?   @db.Text
    excerpt     String?   @db.Text
    coverImage  String?
    published   Boolean   @default(false)
    featured    Boolean   @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    publishedAt DateTime?
    tags        Tag[]     @relation("PostToTag")
    author      User      @relation(fields: [authorId], references: [id])
    authorId    String

    @@index([slug])
    @@index([published])
    @@index([featured])
}

model Tag {
    id    String @id @default(cuid())
    name  String @unique
    slug  String @unique
    posts Post[] @relation("PostToTag")

    @@index([slug])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    SharedCode    SharedCode[]
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SharedCode {
    id          String   @id @default(cuid())
    code        String
    language    String
    createdAt   DateTime @default(now())
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
}

model Project {
    id              String    @id @default(cuid())
    title           String
    description     String    @db.Text
    longDescription String?   @db.Text
    image           String?
    tags            String[] // Array of technology tags
    url             String? // Live demo URL
    githubUrl       String? // GitHub repository URL
    category        String // e.g., "ai", "games", "blockchain", "web"
    featured        Boolean   @default(false)
    published       Boolean   @default(false)
    order           Int       @default(0)
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    publishedAt     DateTime?
    author          User      @relation(fields: [authorId], references: [id])
    authorId        String

    @@index([published])
    @@index([featured])
    @@index([category])
    @@index([order])
}
